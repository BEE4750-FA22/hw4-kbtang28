---
title: "BEE 4750/5750 Homework 4"
author: "Katerina Tang (kbt28)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: false
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()

Pkg.add("GraphRecipes")
using GraphRecipes, JuMP, Cbc, Plots
```

# Problem 1

## Problem 1.1
To find the overall recycling fraction for the waste produced by each city, we multiply the fraction of each type of waste by its recycling rate and sum over the different types of waste:
```julia
composition = [.15, .40, .05, .03, .02, .05, .18, .04, .02, .02, .01, .03]
recycling_rate = [0, 0.55, 0.15, .1, 0, .3, .4, .6, .75, .8, .5, 0]
ash_rate = [.08, .07, .05, .1, .15, .02, .02, 1, 1, 1, 1, .7]

overall_recycling = round(sum(composition .* recycling_rate); digits=4)
```

To find the overall ash fraction for the waste produced by each city, we multiply the fraction of each type of waste by its ash content and sum over the different types of waste:
```julia
overall_ash = round(sum(composition .* ash_rate); digits=4)
```

To find the ash content of the recycling residuals, we look at only components with a recycling rate greater than zero:
```julia
recycled_ash = round(sum(composition.*(1 .- recycling_rate).*ash_rate)/sum(composition.*(1 .- recycling_rate)); digits=4)
```

## Problem 1.2
Let WTE facility be disposal facility 1, MRF be disposal facility 2, and LF be disposal facility 3.
Our decision variables are: $W_{ij}$, the waste (Mg/d) transported from city $i$ to disposal $j$; 
$R_{kj}$, the residual waste (Mg/d) transported from disposal $k$ to disposal $j$; 
and $Y_j$, the operational status of disposal $j$ on a given day (i.e., $Y_{j}=0$ or $Y_j=1$).

## Problem 1.3
The WTE facility costs are
```math
2500Y_1 + 60(W_{11} + W_{21} + R_{21}),
```
the MRF costs are
```math
1500Y_2 + 7(W_{12} + W_{22}) + 45(0.3775)(W_{12} + W_{22}),
```
and the LF costs are
```math
2000Y_3 + 50(W_{13} + W_{23} + R_{13} + R_{23}).
```
Furthermore, the transportation costs are
```math
1.5\left(15W_{11} + 5W_{12} + 30W_{13} + 10W_{21} + 15W_{22} + 25W_{23} + 18R_{13} + 15R_{21} + 32R_{23}\right)
```

We wish to minimize the total cost, which is given by
```math
\begin{align*}
82.5W_{11} + 31.5W_{12} + 95W_{13} + 75W_{21} + 46.5W_{22} + 87.5W_{23}\\
+ 77R_{13} + 82.5R_{21} + 98R_{23}\\
+ 2500Y_1 + 1500Y_2 + 2000Y_3.
\end{align*}
```
## Problem 1.4
We must dispose of all the waste from each city, so
```math
W_{11} + W_{12} + W_{13}=100
```
and 
```math
W_{21} + W_{22} + W_{23}=170.
```
There is also a capacity limit at each disposal site, so
```math

\begin{align*}
W_{11} + W_{21} + R_{21}&\leq 150,\\
W_{12} + W_{22} &\leq 350,
\end{align*}
```
and
```math
W_{13} + W_{23} + R_{13} + R_{23}\leq 200.
```

There are also some basic constraints coming from how the disposal sites work.
Since the landfill is the final waste destination, $R_{31} + R_{32} = 0$.
It doesn't make sense to talk about waste moving from a disposal site to the same disposal site, so $R_{11} = R_{22} = R_{33} = 0$.
And since ash can't be recycled, $R_{12}=0$.

We must also take into account the recycling rates and ash content. As calculated in Problem 1.1, we should have
```math
R_{21} + R_{23} = (1-0.3775)(W_{12} + W_{22})
```
and
```math
R_{13} = 0.1641(W_{11} + W_{21}) + 0.1386R_{21}.
```
Finally, $W_{ij}$ and $R_{ij}$ must be nonnegative for all $i$ and $j$, and $Y_1$, $Y_2$, and $Y_3$ satisfy the following:
```math
Y_1 = \begin{cases} 0 & \text{ if $W_{11}+W_{21}+R_{21} = 0$}\\ 1 & \text{ else}\end{cases}\\
Y_2 = \begin{cases} 0 & \text{ if $W_{12}+W_{22} = 0$}\\ 1 & \text{ else}\end{cases}\\
Y_3 = 1
```
## Problem 1.5
```julia
waste = Model(Cbc.Optimizer)
I = 1:2 # number of cities
J = 1:3 # number of disposal sites

@variable(waste, W[i in I, j in J] >= 0)
@variable(waste, R[k in J, j in J] >= 0)
@variable(waste, Y[j in J], Bin)

@objective(waste, Min, sum([82.5 31.5 95; 75 46.5 87.5].*W) + sum([0 0 77; 82.5 0 98; 0 0 0].*R) + sum([2500; 1500; 2000].*Y))

city_out = [100; 170]

@constraint(waste, city[i in I], sum(W[i, :]) == city_out[i])
@constraint(waste, wte, W[1, 1] + W[2, 1] + R[2, 1] <= 150)
@constraint(waste, mrf, W[1, 2] + W[2, 2] <= 350)
@constraint(waste, lf, W[1, 3] + W[2, 3] + R[1, 3] + R[2, 3] <= 200)
@constraint(waste, resid1, R[2, 1] + R[2, 3] == (1-overall_recycling)*(W[1, 2] + W[2, 2]))
@constraint(waste, resid2, R[1, 3] == overall_ash*(W[1, 1] + W[2, 1]) + recycled_ash*R[2, 1])
@constraint(waste, noresids, sum(R[j, j] for j in J) + R[1, 2] + R[3, 1] + R[3, 2] == 0)
@constraint(waste, commit1, !Y[1] => {W[1, 1] + W[2, 1] + R[2, 1] == 0})
@constraint(waste, commit2, !Y[2] => {W[1, 2] + W[2, 2] == 0})
@constraint(waste, commit3, Y[3] == 1)

set_silent(waste)
optimize!(waste)
```
## Problem 1.6
The optimal solution will cost `j round(objective_value(waste), digits=2)` dollars per day. 
The MRF will not be used.
A diagram showing the flow of waste between cities and the disposal facilities in this optimal solution is below.
```julia; echo=false
A = [0 0 0 0 1 1 0 0
     0 0 0 0 0 0 1 0
     0 0 0 0 0 0 0 1
     0 0 0 0 0 0 0 0
     0 0 1 0 0 0 0 0
     0 0 0 1 0 0 0 0
     0 0 0 1 0 0 0 0
     0 0 0 1 0 0 0 0];
	
names = ["City 1", "City 2", "WTE", "LF", string(round(value.(W)[1, 1], digits=2))*"Mg/d", string(round(value.(W)[1, 3], digits=2))*"Mg/d", string(round(value.(W)[2, 3], digits=2))*"Mg/d", string(round(value.(R)[1, 3], digits=2))*"Mg/d"];
shapes=[:hexagon, :hexagon, :rect, :rect, :rect, :rect, :rect, :rect, :rect];
xpos = [-1 1 -1.5 1.5 -1.5 0 1.5 0];
ypos = [1 1 -1 -1 0 0 0 -1.2];

graphplot(A, names=names, markersize=0.35, markerstrokewidth=0, markershapes=shapes, markercolor=:white, x=xpos, y=ypos)
```
We see that City 1 sends most of its waste to the WTE first, while City 2 sends all of its waste straight to the landfill.

# Problem 2

## Problem 2.1
We have to reformulate our objective function; the decision variables and constraints should not change. The new WTE facility costs are
```math
2500Y_1 + 75(W_{11} + W_{21} + R{21}),
```
and the new transportation costs are 
```math
2\left(15W_{11} + 5W_{12} + 30W_{13} + 10W_{21} + 15W_{22} + 25W_{23} + 18R_{13} + 15R_{21} + 32R_{23}\right).
```
This means our new objective function is
```math
\begin{align*}
105W_{11} + 34W_{12} + 110W_{13} + 90W_{21} + 54W_{22} + 100W_{23}\\
+ 86R_{13} + 100R_{21} + 114R_{23}\\
+ 2500Y_1 + 1500Y_2 + 2000Y_3.
\end{align*}
```

## Problem 2.2
```julia
waste = Model(Cbc.Optimizer)
I = 1:2 # number of cities
J = 1:3 # number of disposal sites

@variable(waste, W[i in I, j in J] >= 0)
@variable(waste, R[k in J, j in J] >= 0)
@variable(waste, Y[j in J], Bin)

@objective(waste, Min, sum([105 34 110; 95 54 100].*W) + sum([0 0 86; 105 0 114; 0 0 0].*R) + sum([2500; 1500; 2000].*Y))

city_out = [100; 170]

@constraint(waste, city[i in I], sum(W[i, :]) == city_out[i])
@constraint(waste, wte, W[1, 1] + W[2, 1] + R[2, 1] <= 150)
@constraint(waste, mrf, W[1, 2] + W[2, 2] <= 350)
@constraint(waste, lf, W[1, 3] + W[2, 3] + R[1, 3] + R[2, 3] <= 200)
@constraint(waste, resid1, R[2, 1] + R[2, 3] == (1-overall_recycling)*(W[1, 2] + W[2, 2]))
@constraint(waste, resid2, R[1, 3] == overall_ash*(W[1, 1] + W[2, 1]) + recycled_ash*R[2, 1])
@constraint(waste, noresids, sum(R[j, j] for j in J) + R[1, 2] + R[3, 1] + R[3, 2] == 0)
@constraint(waste, commit1, !Y[1] => {W[1, 1] + W[2, 1] + R[2, 1] == 0})
@constraint(waste, commit2, !Y[2] => {W[1, 2] + W[2, 2] == 0})
@constraint(waste, commit3, Y[3] == 1)

set_silent(waste)
optimize!(waste)
```

## Problem 2.3
The new optimal solution will cost `j round(objective_value(waste), digits=2)` dollars per day.
Now the MRF will is used while the WTE facility has become prohibitively expensive and is no longer used.
A diagram showing the flow of waste between cities and the disposal facilities in this optimal solution is below.
```julia; echo=false
A = [0 0 0 0 1 0 0 0;
     0 0 0 0 0 1 1 0;
     0 0 0 0 0 0 0 1;
     0 0 0 0 0 0 0 0
     0 0 1 0 0 0 0 0
     0 0 1 0 0 0 0 0
     0 0 0 1 0 0 0 0
     0 0 0 1 0 0 0 0];
	
names = ["City 1", "City 2", "MRF", "LF", string(round(value.(W)[1, 2], digits=2))*"Mg/d", string(round(value.(W)[2, 2], digits=2))*"Mg/d", string(round(value.(W)[2, 3], digits=2))*"Mg/d", string(round(value.(R)[2, 3], digits=2))*"Mg/d"];
shapes=[:hexagon, :hexagon, :rect, :rect, :rect, :rect, :rect, :rect, :rect];
xpos = [-1 1 -1.5 1.5 -1.5 0 1.5 0];
ypos = [1 1 -1 -1 0 0 0 -1.2];

graphplot(A, names=names, markersize=0.35, markerstrokewidth=0, markershapes=shapes, markercolor=:white, x=xpos, y=ypos)
```
We see that City 1 sends all of its waste to the MRF, while City 2 sends about half of its waste to the MRF first and the remaining half straight to the landfill.

# References

I based my code on the example in the Lecture 15 notes on mixed integer programming.